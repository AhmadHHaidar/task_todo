// Mocks generated by Mockito 5.4.4 from annotations
// in task_app/test/todo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:sqflite/sqflite.dart' as _i3;
import 'package:task_app/core/usecase.dart' as _i11;
import 'package:task_app/features/task/data/data_sources/locale_data_source.dart'
    as _i16;
import 'package:task_app/features/task/data/models/todo_model.dart' as _i7;
import 'package:task_app/features/task/data/models/user_model.dart' as _i14;
import 'package:task_app/features/task/domain/repositories/task_repository.dart'
    as _i2;
import 'package:task_app/features/task/domain/use_cases/add_task_use_case.dart'
    as _i4;
import 'package:task_app/features/task/domain/use_cases/delete_task_use_case.dart'
    as _i12;
import 'package:task_app/features/task/domain/use_cases/get_all_task_use_case.dart'
    as _i10;
import 'package:task_app/features/task/domain/use_cases/login_use_case.dart'
    as _i13;
import 'package:task_app/features/task/domain/use_cases/refresh_token_use_case.dart'
    as _i15;
import 'package:task_app/features/task/domain/use_cases/update_task_use_case.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTaskUseCase extends _i1.Mock implements _i4.AddTaskUseCase {
  MockAddTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, _i7.Todo>> call(_i7.Todo? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, _i7.Todo>>.value(
            _i8.dummyValue<_i6.Either<dynamic, _i7.Todo>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, _i7.Todo>>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i9.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, _i7.Todo>> call(_i7.Todo? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, _i7.Todo>>.value(
            _i8.dummyValue<_i6.Either<dynamic, _i7.Todo>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, _i7.Todo>>);
}

/// A class which mocks [GetAllTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTaskUseCase extends _i1.Mock implements _i10.GetAllTaskUseCase {
  MockGetAllTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, List<_i7.Todo>>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, List<_i7.Todo>>>.value(
            _i8.dummyValue<_i6.Either<dynamic, List<_i7.Todo>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, List<_i7.Todo>>>);
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i12.DeleteTaskUseCase {
  MockDeleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, _i7.Todo>> call(_i7.Todo? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, _i7.Todo>>.value(
            _i8.dummyValue<_i6.Either<dynamic, _i7.Todo>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, _i7.Todo>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i13.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, _i14.UserModel>> call(
          _i13.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, _i14.UserModel>>.value(
            _i8.dummyValue<_i6.Either<dynamic, _i14.UserModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, _i14.UserModel>>);
}

/// A class which mocks [RefreshTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshTokenUseCase extends _i1.Mock
    implements _i15.RefreshTokenUseCase {
  MockRefreshTokenUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i5.Future<_i6.Either<dynamic, _i14.UserModel>> call(
          _i15.RefreshTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<dynamic, _i14.UserModel>>.value(
            _i8.dummyValue<_i6.Either<dynamic, _i14.UserModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<dynamic, _i14.UserModel>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i16.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i3.Database>);

  @override
  _i5.Future<int> insertTodo(_i7.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #insertTodo,
          [todo],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> insertTodos(List<_i7.Todo>? todos) => (super.noSuchMethod(
        Invocation.method(
          #insertTodos,
          [todos],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> deleteTodoById(int? todoId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodoById,
          [todoId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateTodoById(_i7.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodoById,
          [todo],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i7.Todo>> getTodosWithPagination(
    int? limit,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodosWithPagination,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i5.Future<List<_i7.Todo>>.value(<_i7.Todo>[]),
      ) as _i5.Future<List<_i7.Todo>>);
}
